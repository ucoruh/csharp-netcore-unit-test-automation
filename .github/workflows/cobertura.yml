name: .NET Windows MacOS Linux Release

on:
  push:
    tags:
      - 'v*'
#on:
#  push:
#    branches:
#      - main
#  pull_request:
#    branches:
#      - main

jobs:
  build:
    runs-on: windows-latest
    permissions:
      contents: read
      issues: read
      checks: write
      pull-requests: write
    steps:
      - name: Checkout
        uses: actions/checkout@v2
        
      - name: Setup .NET Core
        uses: actions/setup-dotnet@v1
        
      - name: Install Chocolatey
        run: |
          Set-ExecutionPolicy Bypass -Scope Process -Force; iex ((New-Object System.Net.WebClient).DownloadString('https://chocolatey.org/install.ps1'))
        shell: powershell

      - name: Install reportgenerator
        run: choco install reportgenerator.portable -y
        shell: powershell
        
      - name: Install Doxygen
        run: choco install doxygen.install -y

      - name: Generate Documentation
        run: doxygen Doxyfile

      - name: Restore dependencies
        run: dotnet restore
        working-directory: ./CalculatorLibrary.Tests

      - name: Install coverlet.msbuild
        run: dotnet add package coverlet.msbuild --version 3.1.0
        working-directory: ./CalculatorLibrary.Tests

      - name: Build
        run: dotnet build --configuration Release
        working-directory: ./CalculatorLibrary.Tests

      - name: Test with Coverage
        run: dotnet test --no-build --configuration Release --verbosity normal --collect:"XPlat Code Coverage" --results-directory:./TestResults --logger:trx
        working-directory: ./CalculatorLibrary.Tests

      - name: Generate Coverage Report
        run: reportgenerator "-reports:**/coverage.cobertura.xml" "-targetdir:coveragereport" -reporttypes:Html
        
      - name: Publish Test Results
        id: test-results
        uses: EnricoMi/publish-unit-test-result-action/composite@v2
        if: always()
        with:
         files: |
          **/coverage.cobertura.xml    

      - name: Set badge color
        shell: bash
        run: |
          case ${{ fromJSON(steps.test-results.outputs.json).conclusion }} in
            success)
              echo "BADGE_COLOR=31c653" >> $GITHUB_ENV
              ;;
            failure)
              echo "BADGE_COLOR=800000" >> $GITHUB_ENV
              ;;
            neutral)
              echo "BADGE_COLOR=696969" >> $GITHUB_ENV
              ;;
          esac
    
      - name: Create badge
        uses: emibcn/badge-action@d6f51ff11b5c3382b3b88689ae2d6db22d9737d1
        with:
          label: Tests
          status: '${{ fromJSON(steps.test-results.outputs.json).formatted.stats.tests }} tests, ${{ fromJSON(steps.test-results.outputs.json).formatted.stats.runs }} runs: ${{ fromJSON(steps.test-results.outputs.json).conclusion }}'
          color: ${{ env.BADGE_COLOR }}
          path: badge.svg
    
      - name: Commit badge
        run: |
          git config --local user.email "action@github.com"
          git config --local user.name "GitHub Action"
          git add badge.svg
          git commit -m "Add badge image"
          
      - name: Check Test Coverage
        run: |
            $ErrorActionPreference = 'Stop'
            $coverageThreshold = 100.00
            $coverageReportPath = Get-ChildItem -Recurse -Filter 'coverage.cobertura.xml' | Select-Object -ExpandProperty FullName
            $lines = Get-Content $coverageReportPath
            $xmlContent = $lines -join "`n"
            $coverageXmlList = $xmlContent -split "<\?xml"
            $totalLines = 0
            $coveredLines = 0
            foreach ($coverageXmlString in $coverageXmlList) {
                if ($coverageXmlString.Trim() -ne '') {
                    $coverageXmlString = "<?xml" + $coverageXmlString
                    [xml]$coverageXml = $coverageXmlString
                    $lineRate = $coverageXml.SelectSingleNode("//coverage").GetAttribute("line-rate")
                    $coverage = [float]$lineRate * 100.00
                    if ($coverage -lt $coverageThreshold) {
                        Write-Host "Current test coverage is below the threshold of $coverageThreshold%."
                        Write-Host "Current test coverage: $coverage%."
                        exit 1
                    }
                }
            }
        shell: powershell

#      - name: Publish
#        run: dotnet publish --configuration Release --output publish
      - name: Build/Publish for Windows
        run: dotnet publish -c Release -r win-x64 --self-contained true -o publish/windows

      - name: Get Commit Summary
        id: commit_summary
        run: echo "::set-output name=summary::$(git log --format=%B -n 1 ${{ github.sha }})"

      - name: Create Release
        id: create_common_release
        uses: actions/create-release@v1
        env:
          GITHUB_TOKEN: ${{ secrets.NET_CORE_TOKEN }}
        with:
          tag_name: ${{ github.ref }}
          release_name: Release ${{ github.ref }}
          body: |
            Changes in this release:
            ${{ steps.commit_summary.outputs.summary }}
            
            Dr. Ugur CORUH
          draft: false
          prerelease: false

      - name: Compress Windows binaries
        run: tar -czvf windows-binaries.tar.gz -C publish/windows .
        
      - name: Compress Windows Test Coverage Report
        run: tar -czvf test-coverage-html.tar.gz -C coveragereport .
        
      - name: Compress Doxygen Output (Html/Xml/Latex)
        run: tar -czvf doxygen-output-html-xml-latex.tar.gz -C Docs .
                
      - name: Upload Windows Binaries to release asset
        uses: actions/upload-release-asset@v1
        with:
          upload_url: ${{ steps.create_common_release.outputs.upload_url }}
          asset_path: ./windows-binaries.tar.gz
          asset_name: windows-binaries.tar.gz
          asset_content_type: application/gzip
        env:
          GITHUB_TOKEN: ${{ secrets.NET_CORE_TOKEN }}

      - name: Upload Test Converage HTML Report to release asset
        uses: actions/upload-release-asset@v1
        with:
          upload_url: ${{ steps.create_common_release.outputs.upload_url }}
          asset_path: ./test-coverage-html.tar.gz
          asset_name: test-coverage-html.tar.gz
          asset_content_type: application/gzip
        env:
          GITHUB_TOKEN: ${{ secrets.NET_CORE_TOKEN }}
          
          
      - name: Upload Doxygen Output to release asset
        uses: actions/upload-release-asset@v1
        with:
          upload_url: ${{ steps.create_common_release.outputs.upload_url }}
          asset_path: ./doxygen-output-html-xml-latex.tar.gz
          asset_name: doxygen-output-html-xml-latex.tar.gz
          asset_content_type: application/gzip
        env:
          GITHUB_TOKEN: ${{ secrets.NET_CORE_TOKEN }}
